package me.scorecard.util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import me.scorecard.bean.ScoreCardRecord;
import me.scorecard.common.ScoreCardConstants;

public class ScoreCardExcelToPdfConvertor {
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

	public static void main(String[] args) throws IOException {

		File directory = new File(ScoreCardConstants.PDF_SOURCE_FOLDER);
		ScoreCardExcelToPdfConvertor scoreCardExcelToPdfConvertor = new ScoreCardExcelToPdfConvertor();
		java.util.List<ScoreCardRecord> scoreCardsList = null;
		if (directory.isDirectory()) {
			ExcelFileReader scoreCardExcelFileReader = new ExcelFileReader();
			for (String fileName : directory.list()) {
				scoreCardsList = scoreCardExcelFileReader
						.readScoreCardExcelFile(directory.getAbsolutePath() + "\\" + fileName);
				scoreCardExcelToPdfConvertor.generatePDFReports(scoreCardsList, fileName.substring(0, 10) + ".pdf");
			}
		}
	}

	public void generatePDFReports(java.util.List<ScoreCardRecord> scoreCardsList, String fileName) {
		try {
			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(
					ScoreCardConstants.PDF_DESTINATION_FOLDER + "/" + fileName.substring(0, 10) + ".pdf"));
			document.open();
			// addMetaData(document);
			addTitlePage(document, fileName);
			addContent(document, scoreCardsList);
			document.close();
			System.out.println("Create PDF report for " + fileName.substring(0, 10));
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	// iText allows to add metadata to the PDF which can be viewed in your Adobe
	// Reader
	// under File -> Properties
	private void addMetaData(Document document) {
		document.addTitle("My first PDF");
		document.addSubject("Using iText");
		document.addKeywords("Java, PDF, iText");
		document.addAuthor("Lars Vogel");
		document.addCreator("Lars Vogel");
	}

	private void addTitlePage(Document document, String fileName) throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Report of " + fileName.substring(0, 10)));

		addEmptyLine(preface, 1);
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph("Report generated by: Chetan on " + new Date(), smallBold));
		addEmptyLine(preface, 3);
		preface.add(new Paragraph(
				"This document provides feedback to the students enrolled for Java programming course.", smallBold));

		addEmptyLine(preface, 8);

		preface.add(new Paragraph("This document is confidential to the intended recepient", redFont));

		document.add(preface);
		// Start a new page
		document.newPage();
	}

	private void addContent(Document document, java.util.List<ScoreCardRecord> scoreCardsList)
			throws DocumentException {
		Anchor anchor = new Anchor("Report", catFont);
		anchor.setName("Report");

		// Second parameter is the number of the chapter
		Chapter chapter = new Chapter(new Paragraph(anchor), 1);

		Paragraph paragraph = new Paragraph("Discussion 1");
		Section subCatPart = chapter.addSection(paragraph);
		// subCatPart.add(new Paragraph("Hello"));

		// add a list
		// createList(subCatPart);
		Paragraph paragraph1 = new Paragraph();
		addEmptyLine(paragraph1, 5);
		subCatPart.add(paragraph1);

		// add a table
		createTable(subCatPart, scoreCardsList);

		// now add all this to the document
		document.add(chapter);

		/*
		 * // Next section anchor = new Anchor("Second Chapter", catFont);
		 * anchor.setName("Second Chapter");
		 * 
		 * // Second parameter is the number of the chapter catPart = new
		 * Chapter(new Paragraph(anchor), 1);
		 * 
		 * paragraph1 = new Paragraph("Subcategory", subFont); subCatPart =
		 * catPart.addSection(paragraph1); subCatPart.add(new Paragraph(
		 * "This is a very important message"));
		 * 
		 * // now add all this to the document document.add(catPart);
		 */
	}

	private void createTable(Section subCatPart, java.util.List<ScoreCardRecord> scoreCardsList)
			throws DocumentException {
		PdfPTable table = new PdfPTable(3);
		float[] widths = { 3, 1, 3 };
		table.setWidths(widths);

		// t.setBorderColor(BaseColor.GRAY);
		// t.setPadding(4);
		// t.setSpacing(4);
		// t.setBorderWidth(1);

		PdfPCell c1 = new PdfPCell(new Phrase("Ability"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Status"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Feedback"));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);

		for (ScoreCardRecord card : scoreCardsList) {
			table.addCell(card.getTopic());

			PdfPCell cell = new PdfPCell();
			if (card.getStatus() == 1.0)
				cell.setBackgroundColor(BaseColor.GREEN);
			else
				cell.setBackgroundColor(BaseColor.RED);
			table.addCell(cell);
			table.addCell(card.getComment());
		}

		subCatPart.add(table);

	}

	private void createList(Section subCatPart) {
		List list = new List(true, false, 10);
		list.add(new ListItem("First point"));
		list.add(new ListItem("Second point"));
		list.add(new ListItem("Third point"));
		subCatPart.add(list);
	}

	private void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
}